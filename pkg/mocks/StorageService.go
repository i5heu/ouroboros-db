// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	storage "github.com/i5heu/ouroboros-db/pkg/storage"
	mock "github.com/stretchr/testify/mock"

	types "github.com/i5heu/ouroboros-db/pkg/types"
)

// StorageService is an autogenerated mock type for the StorageService type
type StorageService struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *StorageService) Close() {
	_m.Called()
}

// CreateNewEvent provides a mock function with given fields: options
func (_m *StorageService) CreateNewEvent(options storage.EventOptions) (types.Event, error) {
	ret := _m.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewEvent")
	}

	var r0 types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.EventOptions) (types.Event, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(storage.EventOptions) types.Event); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(types.Event)
	}

	if rf, ok := ret.Get(1).(func(storage.EventOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRootEvent provides a mock function with given fields: title
func (_m *StorageService) CreateRootEvent(title string) (types.Event, error) {
	ret := _m.Called(title)

	if len(ret) == 0 {
		panic("no return value specified for CreateRootEvent")
	}

	var r0 types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.Event, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) types.Event); ok {
		r0 = rf(title)
	} else {
		r0 = ret.Get(0).(types.Event)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GarbageCollection provides a mock function with given fields:
func (_m *StorageService) GarbageCollection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GarbageCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEvents provides a mock function with given fields:
func (_m *StorageService) GetAllEvents() ([]types.Event, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllEvents")
	}

	var r0 []types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]types.Event, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []types.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Event)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllRootEvents provides a mock function with given fields:
func (_m *StorageService) GetAllRootEvents() ([]types.Event, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllRootEvents")
	}

	var r0 []types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]types.Event, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []types.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Event)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields: hashOfEvent
func (_m *StorageService) GetEvent(hashOfEvent types.Hash) (types.Event, error) {
	ret := _m.Called(hashOfEvent)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Hash) (types.Event, error)); ok {
		return rf(hashOfEvent)
	}
	if rf, ok := ret.Get(0).(func(types.Hash) types.Event); ok {
		r0 = rf(hashOfEvent)
	} else {
		r0 = ret.Get(0).(types.Event)
	}

	if rf, ok := ret.Get(1).(func(types.Hash) error); ok {
		r1 = rf(hashOfEvent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFile provides a mock function with given fields: eventOfFile
func (_m *StorageService) GetFile(eventOfFile types.Event) ([]byte, error) {
	ret := _m.Called(eventOfFile)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Event) ([]byte, error)); ok {
		return rf(eventOfFile)
	}
	if rf, ok := ret.Get(0).(func(types.Event) []byte); ok {
		r0 = rf(eventOfFile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Event) error); ok {
		r1 = rf(eventOfFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadata provides a mock function with given fields: eventOfFile
func (_m *StorageService) GetMetadata(eventOfFile types.Event) ([]byte, error) {
	ret := _m.Called(eventOfFile)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Event) ([]byte, error)); ok {
		return rf(eventOfFile)
	}
	if rf, ok := ret.Get(0).(func(types.Event) []byte); ok {
		r0 = rf(eventOfFile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Event) error); ok {
		r1 = rf(eventOfFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRootEventsWithTitle provides a mock function with given fields: title
func (_m *StorageService) GetRootEventsWithTitle(title string) ([]types.Event, error) {
	ret := _m.Called(title)

	if len(ret) == 0 {
		panic("no return value specified for GetRootEventsWithTitle")
	}

	var r0 []types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]types.Event, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) []types.Event); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRootIndex provides a mock function with given fields:
func (_m *StorageService) GetRootIndex() ([]types.RootEventsIndex, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRootIndex")
	}

	var r0 []types.RootEventsIndex
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]types.RootEventsIndex, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []types.RootEventsIndex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.RootEventsIndex)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreFile provides a mock function with given fields: options
func (_m *StorageService) StoreFile(options storage.StoreFileOptions) (types.Event, error) {
	ret := _m.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for StoreFile")
	}

	var r0 types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.StoreFileOptions) (types.Event, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(storage.StoreFileOptions) types.Event); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(types.Event)
	}

	if rf, ok := ret.Get(1).(func(storage.StoreFileOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorageService creates a new instance of StorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageService {
	mock := &StorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
